fork函数与vfork函数
    一、fork
    1. 调用方法
#include <sys/types.h>
#include <unistd.h>
    pid_t fork(void);
    正确返回：在父进程中返回子进程的进程号，在子进程中返回0
    错误返回：-1
    子进程是父进程的一个拷贝。即，子进程从父进程得到了数据段和堆栈段的拷贝，这些需要分配新的内存；而对于只读的代码段，通常使用共享内存的方式访问。fork返回后，子进程和父进程都从调用fork函数的下一条语句开始执行。
    父进程与子进程的不同之处在于：fork的返回值不同——父进程中的返回值为子进程的进程号，而子进程为0
    2. fork函数调用的用途
    ⑴ 一个进程希望复制自身，从而父子进程能同时执行不同段的代码。
    ⑵ 进程想执行另外一个程序
    二、vfork
    1. 调用方法
    与fork函数完全相同
#include <sys/types.h>
#include <unistd.h>
    pid_t vfork(void);
    正确返回：在父进程中返回子进程的进程号，在子进程中返回0
    错误返回：-1
    2. vfork函数调用的用途
    用vfork创建的进程主要目的是用exec函数执行另外的程序，与fork的第二个用途相同
    三、fork与vfork的区别
    1. fork要拷贝父进程的数据段；而vfork则不需要完全拷贝父进程的数据段，在子进程没有调用exec和exit之前，子进程与父进程共享数据段
    2. fork不对父子进程的执行次序进行任何限制；而在vfork调用中，子进程先运行，父进程挂起，直到子进程调用了exec或exit之后，父子进程的执行次序才不再有限制
    3. 由以上两条可知，当子进程只用来执行新程序时，vfork--exec模式比fork--exec的效率高，而且阻塞，这也就是shell创建新进程的方式
    四、结束子进程
    结束子进程不用exit(0)，而使用_exit(0)。这是因为_exit(0)在结束进程时，不对标准I/O流进行任何操作。而exit(0)则会关闭进程的所有标准I/O流。
    
    
    