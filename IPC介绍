IPC就是进程间通信（Interprocess Communication），广义上讲一切能使进程间相互交流的对象和方法都是IPC，比如文件、管道、socket等。狭义上讲IPC特指消息队列、信号量和共享内存三种对象，其中消息队列应用于不同进程只减少量数据的顺序共享，信号量应用于进程之间的同步与互斥的控制，共享内存则应用于进程之间大批量数据的随即共享访问。


采用消息队列通信比采用管道通信具有更多的灵活性，通信的进程不但没有血缘上的要求，也不需要进行同步处理。发送进程可以在任何时候写入消息，也可以在接收开始之前结束执行。而使用管道通信，无论是无名管道还是有名管道，通信的两个进程都必须是正在运行的进程。

消息队列是IPC对象的一种，与同样提供先进先出服务的管道相比，有如下特点：
    1.消息队列提供了消息数据的自动拆分功能，同时不能接受两次发送的消息。
    2.消息队列提供了不完全随机读取的服务。引入消息类型后，一个消息队列在逻辑上可以化身为多个不同消息类型的链表，用户可以自主选择接收某条逻辑链表上的消息，而不必依次接收队列的首条消息。
    3.消息队列提供了完全异步的读写服务。管道在使用时要求其读写两端必须同时打开，而消息队列没有这个限制，进程可以在任意时刻打开队列，也可以从队列中读取暂时并不存在的消息。

信号量
    进程间的通信不仅仅包括数据交流，也包括过程控制。比如同一时刻，进程A、B不能同事运行，或者进程D不能先于进程C运行等。操作系统中的生产者-消费者问题，正好体现了这种控制关系。生产者和消费者通过一个有界的缓冲区联系起来。它们之间同时存在着同步和互斥的关系，其中同步关系是指，禁止生产者向满的缓冲区输送产品，也禁止消费者从空的缓冲区中提取物品，互斥关系指的是生产者向缓冲区输送产品时，禁止消费者进入，同理消费者从缓冲区取走产品时，也禁止生产者进入。
    共享资源就是这么一个缓冲区，信号量则是一个可以用来控制进程存储共享资源的计数器，它可以是跟踪共享资源的生产和消费的计数器。也可以是协调资源的生产者和消费者之间的同步器，还可以是控制进程和消费进程的互斥开关。
    信号量在本质上是一组整型变量。是为了控制临界资源而产生的一个或一组计数器。
    
    信号量主要用于临界资源的读写控制和并发进程的同步与互斥控制中。
    
    信号量对临界资源的锁定是非强制性的，即只有当进程主动调用函数semop申请资源时信号量设置的锁才起作用。事实上，进程完全可以调用函数semctl直接更改信号量的取值，或者不使用信号量，直接操作临界资源。
    
共享内存
    共享内存是最快的IPC对象。管道、消息队列、信号量等，都借助第三方对象进行通信，进程将交流的数据分别提交到管道、消息队列、信号量，或者从它们中接收交流数据，无形中增加了时间消耗。共享内存可以被多个进程直接访问，加快了进程通信的速度。共享内存本质上就是一段物理内存。共享内存中最重要的属性是内存大小和内存地址，进程在访问共享内存前必须先将共享内存映射到进程空间的一个虚拟地址中，然后任何对该虚拟地址的数据操作都将直接作用到物理内存上。共享内存是最快捷的进程间通信方式，它被进程映射后作为普通内存使用，不需要额外的read和write函数。共享内存中的数据一旦被进程更改了，都将立刻在其他映射了该共享内存的进程中体现。共享内存由进程创建，但是进程结束时共享内存仍然保留，除非该共享内存被显式地删除或者重启操作系统。一般来讲，多个进程对共享内存的同一区域进行访问时必须提供同步控制，即锁机制，但共享内存本身对此并不提供支持，用户进程必须自己完成相关操作，因此共享内存常常与信号量共同使用，由信号量完成对共享内存区域的锁操作。
    
    共享内存一般会直接申请一个足够大的空间，但每次读写的数据量却不会很大，这样势必存在共享内存数据索引的问题。unix内核并不像格式化磁盘一样格式化共享内存，所以用户必须人为地把大共享内存块划分为单个的小记录快。比如一个8MB的共享内存，每次读写操作1kb大小的数据，就需要划分成8kb个记录块供操作。
    
    共享内存的写入或读取同时进行，则可能造成读脏数据、写入无效等并发引起的副作用，所以信号量往往伴随共享内存同事出现，为操作共享内存作并发控制。

IPC对象只有在联合使用时才能发挥最大的作用。
    
IPC对象应用
    一方面单独使用信号量没有意义，另一方面单独使用共享内存无法进行并发控制，因此共享内存与信号量就成了天然的同盟军，信号量为进程调用共享内存提供了同步与互斥控制共享内存则是信号量控制的临界资源。
    共享内存的常见应用模型（实践中，unix的进程对共享内存的几种常见模型如下：）
        1。 1-1模型（共享内存利用效率低）
            进程在使用共享内存前，必须先对信号量提交P操作申请共享内存资源，成功后进程方可写入共享内存，操作完毕后务必对信号量提交V操作释放共享内存资源。
        2。  n-n 模型 （保证了共享内存可以被n个进程并发访问）
            共享内存被分为若干个区域，每个区域都对应了一个专门的信号量。进程在使用共享内存前，必须先确认待操作的内存记录区域编号，然后向对应的信号量提交P操作申请资源，资源申请成功后，进程只能读写该区域的数据，操作完毕后务必对原信号量提交V操作以释放本段内存资源
        3。 1-n-n模型
            模型n-n虽然解决了共享内存的并发问题，可以极大地提高共享内存利用率，但是也有着如下缺陷：
                （1）引入了大量的信号量，耗费了信号量资源
                （2）进程不能主动确定共享内存的空闲区域。若果按照顺序申请，一方面势必引起部分区域申请量大，部分区域没有申请，负载不均衡的现象。另一方面，当进程申请已经分配的区域时，也会造成进程阻塞或者不必要的时间消耗，降低了共享内存的利用率。
            模型1-n-n能够解决这个问题，在本模型中，共享内存被划分为数据区和MAP区，其中数据区由n个相同大小的记录组成，MAP区由n个字节组成，每个字节代表一个数据记录快的使用情况。MAP区记载了数据区内存块的分配情况，进程在使用共享内存前，必须先访问MAP区，从中分配空闲的内存区域，然后就可以独占使用分配的内存区域了。当不再需要该内存块区域时，进程务必再次访问MAP，释放内存资源。信号量的作用就是控制进入MAP区的进程数量，确保任意时刻只能有一个进程访问MAP，保证正确地分配共享内存块。实践应用中，共享内存数据的提交和使用一般由不同的进程执行。













    
    
