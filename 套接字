    套接字是一种双向通行接口，起源于管道。使用标准的unix文件描述符。支持调用read和write等底层文件编程库在socket中发送和接收数据。
    socket是进程间的一个连接。半相关描述符内容为：{协议，本地地址，本地端口}。 socket的完整相关描述符由以下内容组成：{协议，本地地址，本地端口，远程地址，远程端口}
    
    套接字的类型：
        1.流套接字(SOCK_STREAM)
            流套接字提供双向的（区别于单向）、可靠地（不丢失数据）、顺序的（数据顺序不会错）、不重复的（不会重复发送）、面向连接（发送数据是连接以后发送）的通信数据流.流套接字使用了TCP（The Transmission Control Protocol）,从而保证了数据传输的正确性。网络应用层中很多协议采用了流套接字，比如Telnet协议，HTTP协议等。
        2.数据报套接字（SOCK_DGRAM）
            数据报套接字定义了一种无连接服务，它提供独立的、无序的，不保证可靠性的通信数据流。该套接字在不建立连接前就把数据打包，再为每个包指定一个接收者的地址，每次都试图将该数据包传送到指定地点。包可能丢失、损坏、顺序变化等。数据报套接字使用了UDP（User Datagram Protocol）协议，该协议不维护一个连接，它只把数据达成一个包，再把远程的IP贴上去，然后就把这个包发送出去。使用UDP协议很有可能造成数据报丢失、数据报不按顺序到达或数据包内容错误等非预期现象。网络应用层中采用数据报套接字的协议有tftp协议和bootp协议等。
            UDP协议通常用于以下类型的系统中：（1）对传输数据的正确性、完整性和顺序性没有太多要求的系统。比如广播系统，后台将广播信息以UDP协议发送到每一个终端，但并不在乎终端是否能正确接收信息。（2）对消息进行严格校验的系统。比如某些互联网聊天程序，客户端发送一个UDP包后必须收到服务器应答才发送新的数据包，否则将重复发送，这样既充分利用了UDP的优势，又保证了传输数据的正确性。
        3.原始套接字（SOCK_RAW）
            原始套接字主要应用于底层协议的开发，进行底层的操作。它的功能最为强大，但是使用起来也最为复杂，因此除了一些特殊的应用，一般不建议使用原始套接字。

    socket也是一种文件，不过，它增加了网络通信操作的抽象定义，每个打开的socket都对应一个整数，称之为socket描述符。与文件描述符不同的是，socket描述符指向一个与socket相关的数据结构。
    系统调用open只能产生文件描述符，因此要创建套接字描述符，必须使用socket系统调用，它可以完成建立通信的部分工作。
    
TCP协议的基础编程模型
    TCP是面向连接的通信协议，采用客户机-服务器模式，套接字的全部工作流程：
        首先，服务器端启动进程，调用socket创建一个基于TCP协议的流套接字描述符。
        其次，服务器端调用bind命名套接字，将套接字描述符绑定到本地地址和本地端口上，至此socket的半相关描述---{协议，本地地址，本地端口}--完成。
        再次，服务器端调用listen，开始侦听客户端的socket连接请求。
        接下来，客户端创建套接字描述符，并且调用connect向服务端提交连接请求。服务器端接收到客户端连接请求后，调用accept接受，并创建一个新的套接字描述符与客户端建立连接，然后原套接字描述符继续侦听客户端的连接请求。
        客户端与服务器端的新套接字进行数据传送，调用write或send向对方发送数据，调用read或recv接收数据。
        在数据交流完毕后，双方调用close或者shutdown关闭套接字。
        

套接字的关闭可以有两种方式close， shutdown
    shutdown（int sock, int how）,其中how参数控制如何关闭socket，0，套接字不可读，系统将自动丢弃接收到的数据和留存在读缓冲区的数据，进程不能再从套接字中接受通信数据； 1，套接字不可写，系统将读写缓冲区中的数据发送完毕后关闭套接字写操作，进程不能再从套接字中发送通信数据；2，彻底关闭套接字的连接。
    函数shutdown调用成功时返回0， 否则返回-1，并置错误信息到errno。函数shutdown是强制性关闭全部套接字连接，而函数close只将套接字访问计数器减1，当且仅当计数器值为0时，系统才会真正地关闭套接字通信。利用close这个特性，可以建立socket通信的服务器端并发管理：父进程首先创建侦听套接字，一旦接收到连接请求则创建新套接字与客户连接，再fork子进程，随后父进程调用close关闭新创建的连接套接字后继续侦听，子进程则调用close关闭侦听套接字，全权负责与客户端的通信。

        
        
        
        
